name: Test for Rooty

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # [CHAOS 1/3] Gradle Wrapper 교란: 존재하지 않는 배포 URL/잘못된 SHA + wrapper JAR 삭제
      - name: [CHAOS] Sabotage Gradle wrapper (bad distribution & checksum)
        run: |
          set -euo pipefail
          if [[ -f gradle/wrapper/gradle-wrapper.properties ]]; then
            echo "[chaos] before:"
            sed -n '1,120p' gradle/wrapper/gradle-wrapper.properties || true
            # 가짜 버전/URL 및 잘못된 SHA 삽입 (항상 404 또는 checksum mismatch)
            sed -i 's#^distributionUrl=.*#distributionUrl=https\://services.gradle.org/distributions/gradle-9.99-bin.zip#g' gradle/wrapper/gradle-wrapper.properties
            if grep -q '^distributionSha256Sum=' gradle/wrapper/gradle-wrapper.properties; then
              sed -i 's#^distributionSha256Sum=.*#distributionSha256Sum=deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef#g' gradle/wrapper/gradle-wrapper.properties
            else
              printf '\ndistributionSha256Sum=deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef\n' >> gradle/wrapper/gradle-wrapper.properties
            fi
            echo "[chaos] after:"
            sed -n '1,120p' gradle/wrapper/gradle-wrapper.properties || true
          fi
          # 래퍼 JAR 삭제(필요 시 래퍼가 네트워크 재다운로드 시도 → 404/검증 실패)
          rm -f gradle/wrapper/gradle-wrapper.jar || true
          # properties를 읽기 전용으로 만들어 일부 툴이 수정 시도할 때 EACCES 유발
          chmod 444 gradle/wrapper/gradle-wrapper.properties || true

      - name: Init build log
        run: echo "=== Build job start $(date -u) ===" > build.log

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: 'gradle'

      # [CHAOS 2/3] JDK/자바 바이너리 교란: 가짜 JAVA_HOME + PATH 선두에 가짜 java
      - name: [CHAOS] Poison Java resolution (fake JAVA_HOME & shadowed java)
        run: |
          set -euo pipefail
          mkdir -p .fake-java/bin
          cat > .fake-java/bin/java << 'EOF'
          #!/usr/bin/env bash
          echo "Error occurred during initialization of VM" >&2
          echo "Unrecognized VM option 'InvalidOption'" >&2
          exit 1
          EOF
          chmod +x .fake-java/bin/java
          # PATH에 가짜 java 추가(진짜보다 먼저 잡히도록)
          echo "$PWD/.fake-java/bin" >> $GITHUB_PATH
          # JAVA_HOME을 존재하지 않는 경로로 지정(일부 툴이 이 값에 의존)
          echo "JAVA_HOME=/opt/hostedtoolcache/Java_Temurin/21.0.999-xyz/x64" >> $GITHUB_ENV

      - name: Ensure Gradle wrapper
        run: |
          set -euo pipefail
          {
            chmod +x ./gradlew || true
            test -f gradlew || { echo "[build] ERROR: gradlew missing in repo"; exit 1; }
            # 여기서 래퍼 다운로드 404, 체크섬 불일치, 또는 가짜 java로 인한 VM 에러 중 하나로 실패
            ./gradlew --version
          } |& tee -a build.log

      - name: Build (bootJar)
        run: |
          set -o pipefail
          chmod +x ./gradlew || true
          ./gradlew --no-daemon -Dorg.gradle.jvmargs="-XX:InvalidOption" bootJar |& tee -a build.log

      - name: List JARs to upload
        run: |
          set -o pipefail
          {
            echo "[build] Listing candidate JARs under **/build/libs/"
            find . -path '*/build/libs/*.jar' -type f -print
          } |& tee -a build.log

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: |
            **/build/libs/*.jar
            build.log
          if-no-files-found: error

      - name: Install jq (for reporter)
        if: failure()
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Report failure to Rooty (logs + git diff)
        if: failure()
        env:
          REPORT_URL: ${{ secrets.CI_REPORT_URL }}
          REPORT_TOKEN: ${{ secrets.ROOTY_API_KEY }}
        run: |
          set -euo pipefail

          if [[ ! -s build.log ]]; then
            echo "[reporter] Build failed but no logs captured." > build.log
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            BASE="${{ github.event.before }}"
            HEAD="${{ github.sha }}"
          fi
          [[ -n "${BASE:-}" ]] || BASE="$(git rev-parse HEAD^ 2>/dev/null || echo '')"
          [[ -n "${HEAD:-}" ]] || HEAD="$(git rev-parse HEAD)"

          git diff --no-color --unified=0 "$BASE...$HEAD" > ci.diff || true
          touch ci.diff

          ERROR_LOGS_JSON="$(tail -n 400 build.log | jq -Rcs 'split("\n") | map(select(length>0)) | .[-400:]')"
          TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          payload=$(jq -n \
            --arg workflowName "${{ github.workflow }}" \
            --arg jobName "${{ github.job }}" \
            --arg repository "${{ github.repository }}" \
            --arg commitSha "${{ github.sha }}" \
            --arg timestamp "$TIMESTAMP" \
            --rawfile diff ci.diff \
            --argjson errorLogs "$ERROR_LOGS_JSON" \
            '{workflowName:$workflowName, jobName:$jobName, errorLogs:$errorLogs, gitDiff:$diff, repository:$repository, commitSha:$commitSha, timestamp:$timestamp}')

          CURL_HEADERS=(-H "Content-Type: application/json")
          [[ -n "${REPORT_TOKEN:-}" ]] && CURL_HEADERS+=(-H "Authorization: ApiKey $REPORT_TOKEN")
          curl -sS -X POST "$REPORT_URL" "${CURL_HEADERS[@]}" -d "$payload" | cat

  depl
