name: Java CI/CD with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: 'gradle'

      - name: Ensure Gradle wrapper is executable
        run: |
          test -f gradlew || { echo "gradlew missing. Add Gradle wrapper to repo."; exit 1; }
          chmod +x gradlew
          ./gradlew --version

      - name: Build (capture log)
        run: |
          set -o pipefail
          ./gradlew --no-daemon bootJar 2>&1 | tee build.log

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: |
            **/build/libs/*.jar
            build.log

      - name: Install jq (for failure reporter)
        if: failure()
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Report failure to Rooty (logs + git diff)
        if: failure()
        env:
          REPORT_URL: ${{ secrets.CI_REPORT_URL }}
          REPORT_TOKEN: ${{ secrets.CI_REPORT_TOKEN }}
        run: |
          set -euo pipefail

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            BASE="${{ github.event.before }}"
            HEAD="${{ github.sha }}"
          fi
          [[ -n "${BASE:-}" ]] || BASE="$(git rev-parse HEAD^ 2>/dev/null || echo '')"
          [[ -n "${HEAD:-}" ]] || HEAD="$(git rev-parse HEAD)"

          git diff --no-color --unified=0 "$BASE...$HEAD" > ci.diff || true
          touch build.log ci.diff

          ERROR_LOGS_JSON="$(tail -n 400 build.log | jq -R -s 'split("\n") | map(select(length>0)) | .[-400:]')"
          TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          payload=$(jq -n \
            --arg workflowName "${{ github.workflow }}" \
            --arg jobName "${{ github.job }}" \
            --arg repository "${{ github.repository }}" \
            --arg commitSha "${{ github.sha }}" \
            --arg timestamp "$TIMESTAMP" \
            --rawfile diff ci.diff \
            --argjson errorLogs "$ERROR_LOGS_JSON" \
            '{workflowName:$workflowName, jobName:$jobName, errorLogs:$errorLogs, gitDiff:$diff, repository:$repository, commitSha:$commitSha, timestamp:$timestamp}')

          if [[ -n "${REPORT_URL:-}" ]]; then
            CURL_HEADERS=(-H "Content-Type: application/json")
            [[ -n "${REPORT_TOKEN:-}" ]] && CURL_HEADERS+=(-H "Authorization: Bearer $REPORT_TOKEN")
            curl -sS -X POST "$REPORT_URL" "${CURL_HEADERS[@]}" -d "$payload" | cat
          else
            echo "REPORT_URL is empty; skipping report."
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: dist

      - name: Pick JAR path
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          JAR="$(ls -1 dist/**.jar | head -n1)"
          [[ -f "$JAR" ]] || { echo "No JAR found in dist/"; exit 1; }
          echo "jar=$JAR" >> "$GITHUB_OUTPUT"

      - name: Install jq (for failure reporter)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: SCP Transfer (capture log)
        env:
          PORT: ${{ secrets.PORT }}
          USER: ${{ secrets.USER }}
          SERVER: ${{ secrets.SERVER_IP_ADDRESS }}
        run: |
          set -o pipefail
          scp -P "$PORT" "${{ steps.pick.outputs.jar }}" "$USER@$SERVER:/home/ubuntu/LSA_release" 2>&1 | tee deploy.log

      - name: Restart server (append log)
        env:
          PORT: ${{ secrets.PORT }}
          USER: ${{ secrets.USER }}
          SERVER: ${{ secrets.SERVER_IP_ADDRESS }}
        run: |
          set -o pipefail
          ssh -p "$PORT" "$USER@$SERVER" 'sudo systemctl restart LSAServer.service' 2>&1 | tee -a deploy.log

      - name: Report failure to Rooty (logs + git diff)
        if: failure()
        env:
          REPORT_URL: ${{ secrets.CI_REPORT_URL }}
          REPORT_TOKEN: ${{ secrets.CI_REPORT_TOKEN }}
        run: |
          set -euo pipefail

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            BASE="${{ github.event.before }}"
            HEAD="${{ github.sha }}"
          fi
          [[ -n "${BASE:-}" ]] || BASE="$(git rev-parse HEAD^ 2>/dev/null || echo '')"
          [[ -n "${HEAD:-}" ]] || HEAD="$(git rev-parse HEAD)"

          git diff --no-color --unified=0 "$BASE...$HEAD" > ci.diff || true
          touch deploy.log ci.diff

          ERROR_LOGS_JSON="$(tail -n 400 deploy.log | jq -R -s 'split("\n") | map(select(length>0)) | .[-400:]')"
          TIMESTAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          payload=$(jq -n \
            --arg workflowName "${{ github.workflow }}" \
            --arg jobName "${{ github.job }}" \
            --arg repository "${{ github.repository }}" \
            --arg commitSha "${{ github.sha }}" \
            --arg timestamp "$TIMESTAMP" \
            --rawfile diff ci.diff \
            --argjson errorLogs "$ERROR_LOGS_JSON" \
            '{workflowName:$workflowName, jobName:$jobName, errorLogs:$errorLogs, gitDiff:$diff, repository:$repository, commitSha:$commitSha, timestamp:$timestamp}')

          if [[ -n "${REPORT_URL:-}" ]]; then
            CURL_HEADERS=(-H "Content-Type: application/json")
            [[ -n "${REPORT_TOKEN:-}" ]] && CURL_HEADERS+=(-H "Authorization: Bearer $REPORT_TOKEN")
            curl -sS -X POST "$REPORT_URL" "${CURL_HEADERS[@]}" -d "$payload" | cat
          else
            echo "REPORT_URL is empty; skipping report."
          fi
